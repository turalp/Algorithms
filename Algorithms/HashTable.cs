using System.Collections.Generic;

namespace Algorithms
{
    /// <summary>
    /// Data structure with Key -> Value pair.
    /// </summary>
    /// <typeparam name="TKey">Element key.</typeparam>
    /// <typeparam name="TValue">Element value.</typeparam>
    public class HashTable<TKey, TValue>
    {
        private int INITIAL_SIZE = 16;
        private readonly HashEntry[] _data;

        public HashTable()
        {
            _data = new HashEntry[INITIAL_SIZE];
        }

        /// <summary>
        /// Adds key/value pair into Hashtable.
        /// </summary>
        /// <param name="key">Element key.</param>
        /// <param name="value">Element value.</param>
        public void Put(TKey key, TValue value)
        {
            int index = GetIndex(key);

            HashEntry entry = new HashEntry(key, value);

            if (_data[index] == null)
            {
                _data[index] = entry;
            }
            else
            {
                HashEntry entries = _data[index];

                while (entries.Next != null)
                {
                    entries = entries.Next;
                }

                entries.Next = entry;
            }
        }

        /// <summary>
        /// Gets value from Hashtable by key.
        /// </summary>
        /// <param name="key">Element key.</param>
        /// <returns>Element value.</returns>
        public TValue Get(TKey key)
        {
            int index = GetIndex(key);

            HashEntry entries = _data[index];

            if (entries == null)
            {
                throw new KeyNotFoundException("Key " + key + " does not find in Hashtable.");
            }

            while (!entries.Key.Equals(key) && entries.Next != null)
            {
                entries = entries.Next;
            }

            return entries.Value;
        }

        /// <summary>
        /// Gets index of key.
        /// </summary>
        /// <param name="key">Element key.</param>
        /// <returns>Index of element, generated by hashcode & initial size.</returns>
        private int GetIndex(TKey key)
        {
            int hashCode = key.GetHashCode();

            return (hashCode & 0x7fffffff) % INITIAL_SIZE;
        }

        /// <summary>
        /// Element of Hashtable.
        /// </summary>
        private class HashEntry
        {
            public TKey Key { get; }
            public TValue Value { get; }
            public HashEntry Next { get; set; }

            public HashEntry(TKey key, TValue value)
            {
                Key = key;
                Value = value;
                Next = null;
            }
        }
    }
}
